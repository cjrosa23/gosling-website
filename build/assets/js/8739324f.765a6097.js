(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),r=(n(0),n(95)),o={title:"Create Single Track Visualization",hide_title:!1,slug:"/"},l={unversionedId:"create-single-track-visualization",id:"create-single-track-visualization",isDocsHomePage:!1,title:"Create Single Track Visualization",description:"This tutorial will guide you step by step in writing the JSON specification to create an interactive cytoband visualization in Gosling.",source:"@site/gosling-docs/tutorials/create-single-track-visualization.md",slug:"/",permalink:"/tutorials/",version:"current",sidebar:"tutorials",next:{title:"Multi-track Visualizations",permalink:"/tutorials/create-multi-track-visualization"}},c=[{value:"Loading Data",id:"loading-data",children:[]},{value:"Encoding Data with Marks",id:"encoding-data-with-marks",children:[]},{value:"Transforming Data",id:"transforming-data",children:[]},{value:"Overlaying Multiple Marks",id:"overlaying-multiple-marks",children:[]},{value:"Coming Up Next",id:"coming-up-next",children:[]}],s={toc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This tutorial will guide you step by step in writing the JSON specification to create an interactive cytoband visualization in Gosling.\nYou will learn about:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#loading-data"},"Loading Data")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#encoding-data-with-marks"},"Encoding Data with Marks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#transforming-data"},"Transforming Data")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#overlaying-multiple-marks"},"Overlaying Multiple Marks")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#coming-up-next"},"Coming Up Next"))),Object(r.b)("p",null,"You are encouraged to follow the tutorial and create visualizations in the ",Object(r.b)("a",{parentName:"p",href:"http://gosling.js.org"},"online editor"),"."),Object(r.b)("h2",{id:"loading-data"},"Loading Data"),Object(r.b)("p",null,"In this tutorial, we use a CSV data that contains UCSC hg38 cytoband information (",Object(r.b)("a",{parentName:"p",href:"https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv"},"the complete data file"),")."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Chromosome"),Object(r.b)("th",{parentName:"tr",align:null},"chromStart"),Object(r.b)("th",{parentName:"tr",align:null},"chromEnd"),Object(r.b)("th",{parentName:"tr",align:null},"Name"),Object(r.b)("th",{parentName:"tr",align:null},"Stain"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"chr1"),Object(r.b)("td",{parentName:"tr",align:null},"0"),Object(r.b)("td",{parentName:"tr",align:null},"2300000"),Object(r.b)("td",{parentName:"tr",align:null},"p36.33"),Object(r.b)("td",{parentName:"tr",align:null},"gneg")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"chr1"),Object(r.b)("td",{parentName:"tr",align:null},"2300000"),Object(r.b)("td",{parentName:"tr",align:null},"5300000"),Object(r.b)("td",{parentName:"tr",align:null},"p36.32"),Object(r.b)("td",{parentName:"tr",align:null},"gpos25")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"chr1"),Object(r.b)("td",{parentName:"tr",align:null},"5300000"),Object(r.b)("td",{parentName:"tr",align:null},"770000"),Object(r.b)("td",{parentName:"tr",align:null},"p36.31"),Object(r.b)("td",{parentName:"tr",align:null},"gneg")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"..."),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null}),Object(r.b)("td",{parentName:"tr",align:null})))),Object(r.b)("p",null,"To start with, we load this data through URL to a visualization (i.e., a ",Object(r.b)("inlineCode",{parentName:"p"},"track"),").\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"track.data")," property specifies how to fetch and process the data."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},'\n{\n    "tracks":[{\n        // Load a csv data file through URL\n        "data": {\n            "url": "https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",\n            "chromosomeField": "Chromosome",\n            "type": "csv",\n            "genomicFields": ["chromStart", "chromEnd"]\n        }\n    }]\n}\n')),Object(r.b)("h2",{id:"encoding-data-with-marks"},"Encoding Data with Marks"),Object(r.b)("p",null,"After loading the data, we now specify how to visualize the data.\nThis process is achieved by binding the values of data fields to the visual channels (e.g., color, size) of a graphic element (i.e., ",Object(r.b)("inlineCode",{parentName:"p"},"mark"),")."),Object(r.b)("p",null,"Let's say we use a ",Object(r.b)("inlineCode",{parentName:"p"},"rect")," mark for the loaded csv data.\nEach ",Object(r.b)("inlineCode",{parentName:"p"},"rect")," represents a chromosome.\nThe x-coordinate of the mark's start (",Object(r.b)("inlineCode",{parentName:"p"},"x"),") and end (",Object(r.b)("inlineCode",{parentName:"p"},"xe"),") position indicate the chromStart and the chromeEnd, respectively.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"color")," indicates the stain value. "),Object(r.b)("p",null,"For each visual channel, Gosling creates a mapping from the values of the data field (e.g., ","[gnes, gpos25, gpos50, ...]",") to the values of the visual channel (e.g., color). We call the values of data field ",Object(r.b)("strong",{parentName:"p"},"domain")," and the values of the visual channel ",Object(r.b)("strong",{parentName:"p"},"range"),".\nThis mapping is specified by the following properties:\n| visual channel properties | type                        | description                                                                        |\n| ------------------------- | --------------------------- | ---------------------------------------------------------------------------------- |\n| field                     | string                      | specify name of the data field                                                     |\n| type                      | string                      | specify type of the data field. support ",Object(r.b)("inlineCode",{parentName:"p"},'"genomic"'),", ",Object(r.b)("inlineCode",{parentName:"p"},'"nominal"'),", ",Object(r.b)("inlineCode",{parentName:"p"},'"quantitative"')," |\n| domain                    | ","[number, number]","|"," string[] | specify values of the data field                                                   |\n| range                     | ","[number, number]","|"," string[] | specify values of the visual channel                                               |"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},'{\n    "tracks":[{\n        // specify the size of the visualization\n        "width": 700,\n        "height": 70,\n        // Load a csv data file through URL\n        "data": {\n            "url": "https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",\n            "chromosomeField": "Chromosome",\n            "type": "csv",\n            "genomicFields": ["chromStart", "chromEnd"]\n        },\n        // specify the mark type\n        "mark": "rect",\n        // encoding data with visual channels\n        "x": {\n            "field": "chromStart",\n            "type": "genomic",\n            "domain": {"chromosome": "1"},\n            "axis": "top"\n        },\n        "xe": {"field": "chromEnd", "type": "genomic"},\n        "color": {\n            "field": "Stain", \n            "type": "nominal",\n            "domain": ["gneg", "gpos25", "gpos50", "gpos75", "gpos100", "gvar"],\n            "range": ["white","#D9D9D9","#979797","#636363", "black","#A0A0F2"]\n        },\n        // customize the style of the visual marks. \n        // default values will be used if not specifyed.\n        "size": {"value": 20},\n        "stroke": {"value": "gray"},\n        "strokeWidth": {"value": 0.5}\n    }]\n}\n')),Object(r.b)("img",{src:"https://raw.githubusercontent.com/gosling-lang/gosling-docs/master/images/tutorial/tutorial_0.gif",alt:"gosling vis",width:"700"}),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"\ud83c\udf89  \ud83c\udf89  \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \ud83c\udf89 \ud83c\udf89"),Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("strong",{parentName:"p"},"You have just created a scalable and interactive visualization in Gosling!"),Object(r.b)("br",{parentName:"p"}),"\n","You can interact with the visualization you just created in the online editor through zoom and pan.\nOr, you can keep reading the tutorial and make your visualizations even more fancy."),Object(r.b)("h2",{id:"transforming-data"},"Transforming Data"),Object(r.b)("p",null,"Gossling supports filtering out uninterested data through the ",Object(r.b)("inlineCode",{parentName:"p"},"dataTransform"),' property.\nFor example, we can add a filter to only visualize chromosomes whose stain result is one of "gpos25", "gpos50", "gpos75", or "gpos100".'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-diff"},'{\n    "tracks":[{\n        "width": 700,\n        "height": 70,\n        "data": {\n            "url": "https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",\n            "chromosomeField": "Chromosome",\n            "type": "csv",\n            "genomicFields": ["chromStart", "chromEnd"]\n        },       \n+        "dataTransform": {\n+            "filter": [{"field": "Stain", "oneOf": ["gpos25", "gpos50", "gpos75", "gpos100"]}]\n+        },\n        "mark": "rect",\n        "x": {\n            "field": "chromStart",\n            "type": "genomic",\n            "domain": {"chromosome": "1"},\n            "axis": "top"\n        },\n        "xe": {"field": "chromEnd", "type": "genomic"},\n        "color": {\n            "field": "Stain", \n            "type": "nominal",\n            "domain": ["gneg", "gpos25", "gpos50", "gpos75", "gpos100", "gvar"],\n            "range": ["white","#D9D9D9","#979797","#636363", "black","#A0A0F2"]\n        },\n        "size": {"value": 20},\n        "stroke": {"value": "gray"},\n        "strokeWidth": {"value": 0.5}\n    }]\n}\n')),Object(r.b)("img",{src:"https://raw.githubusercontent.com/gosling-lang/gosling-docs/master/images/tutorial/tutorial_dataTransform.png",alt:"gosling vis dataTransform",width:"700"}),Object(r.b)("p",null,"gvar (purple rect) and gneg (white rect) are not shown in the updated visualization."),Object(r.b)("h2",{id:"overlaying-multiple-marks"},"Overlaying Multiple Marks"),Object(r.b)("p",null,"Multiple ",Object(r.b)("inlineCode",{parentName:"p"},"mark")," shapes can be put on the top of one another by setting ",Object(r.b)("inlineCode",{parentName:"p"},"alignment")," as ",Object(r.b)("inlineCode",{parentName:"p"},'"overlay"'),".\nIn the code below, a chromosome is visualized as a ",Object(r.b)("inlineCode",{parentName:"p"},"triangleRight")," mark if its stain result is ",Object(r.b)("inlineCode",{parentName:"p"},"acen")," and its name includes ",Object(r.b)("inlineCode",{parentName:"p"},"q"),"; a chromosome is visualized as a ",Object(r.b)("inlineCode",{parentName:"p"},"triangleLeft")," mark if its stain result is ",Object(r.b)("inlineCode",{parentName:"p"},"acen")," and its name includes ",Object(r.b)("inlineCode",{parentName:"p"},"p"),". The ",Object(r.b)("inlineCode",{parentName:"p"},"rect")," mark, the ",Object(r.b)("inlineCode",{parentName:"p"},"triangleRight")," mark, and the ",Object(r.b)("inlineCode",{parentName:"p"},"triangleLeft")," mark are overlaid on the same genomic coordinate by setting ",Object(r.b)("inlineCode",{parentName:"p"},"alignment")," as ",Object(r.b)("inlineCode",{parentName:"p"},'"overlay"'),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-diff"},'{\n    "tracks":[{ \n        "width": 700,\n        "height": 70,\n        "data": {\n            "url": "https://raw.githubusercontent.com/sehilyi/gemini-datasets/master/data/UCSC.HG38.Human.CytoBandIdeogram.csv",\n            "type": "csv",\n            "chromosomeField": "Chromosome",\n            "genomicFields": ["chromStart", "chromEnd"]\n        },       \n-       "dataTransform": {\n-           "filter": [{"field": "Stain", "oneOf": ["gpos25", "gpos50", "gpos75", "gpos100"]}]\n-       },\n-       "mark": "rect",\n        "x": {\n            "field": "chromStart",\n            "type": "genomic",\n            "domain": {"chromosome": "1"},\n            "axis": "top"\n        },\n        "xe": {"field": "chromEnd", "type": "genomic"},\n-       "color": {\n-           "field": "Stain", \n-           "type": "nominal",\n-           "domain": ["gpos25", "gpos50", "gpos75", "gpos100"],\n-           "range": ["#D9D9D9","#979797","#636363", "black"]\n-       },\n+       "alignment": "overlay",\n+       "tracks":[\n+           {\n+             "mark": "rect",\n+             "dataTransform": {\n+                     "filter": [{"field": "Stain", "oneOf": ["acen"], "not": true}]\n+                 },\n+             "color": {\n+                 "field": "Stain", \n+                 "type": "nominal",\n+                 "domain": ["gneg", "gpos25", "gpos50", "gpos75", "gpos100", "gvar"],\n+                 "range": ["white","#D9D9D9","#979797","#636363", "black","#A0A0F2"]\n+              }\n+           },\n+           {\n+             "mark": "triangleRight",\n+             "dataTransform": {\n+               "filter": [\n+                 {"field": "Stain", "oneOf": ["acen"]},\n+                 {"field": "Name", "include": "q"}\n+               ]\n+             },\n+             "color": {"value": "#B70101"}\n+           },\n+           {\n+             "mark": "triangleLeft",\n+             "dataTransform": {\n+               "filter": [\n+                 {"field": "Stain", "oneOf": ["acen"]},\n+                 {"field": "Name", "include": "p"}\n+               ]\n+             },\n+             "color": {"value": "#B70101"}\n+           }\n+       ],\n        "size": {"value": 20},\n        "stroke": {"value": "gray"},\n        "strokeWidth": {"value": 0.5}\n    }]\n}\n')),Object(r.b)("img",{src:"https://raw.githubusercontent.com/gosling-lang/gosling-docs/master/images/tutorial/tutorial_overlay.png",alt:"gosling vis overlay",width:"700"}),Object(r.b)("h2",{id:"coming-up-next"},"Coming Up Next"),Object(r.b)("p",null,Object(r.b)("a",{parentName:"p",href:"https://github.com/gosling-lang/gosling-docs/blob/master/tutorials/create-multi-track-visualization.md"},"Tutorial 2"),": how to use semantic zooming, multiple tracks, and circular layout in Gosling."),Object(r.b)("p",null,Object(r.b)("a",{parentName:"p",href:"https://github.com/gosling-lang/gosling-docs/blob/master/tutorials/create-multi-view-visualization.md"},"Tutorial 3"),": how to arrange and link multiple views in Gosling."),Object(r.b)("p",null,"You can find more examples ",Object(r.b)("a",{parentName:"p",href:"http://gosling.js.org"},"here"),"."))}p.isMDXComponent=!0},95:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(n),b=a,u=m["".concat(o,".").concat(b)]||m[b]||d[b]||r;return n?i.a.createElement(u,l(l({ref:t},s),{},{components:n})):i.a.createElement(u,l({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);